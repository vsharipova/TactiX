// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TactiX.DBContext;

#nullable disable

namespace TactiX.Migrations
{
    [DbContext(typeof(TactiXDB))]
    [Migration("20250503195529_F")]
    partial class F
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TactiX.Models.Analysis", b =>
                {
                    b.Property<int>("AnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("analysis_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AnalysisId"));

                    b.Property<double>("AvgHitFactor")
                        .HasColumnType("double precision")
                        .HasColumnName("avg_hit_factor");

                    b.Property<string>("GeneralAdvice")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("general_advice");

                    b.Property<int>("MatchAnalysisId")
                        .HasColumnType("integer")
                        .HasColumnName("match_analysis_id");

                    b.Property<string>("OverallTrend")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("overal_trend");

                    b.Property<DateOnly>("PeriodEnd")
                        .HasColumnType("date")
                        .HasColumnName("period_end");

                    b.Property<DateOnly>("PeriodStart")
                        .HasColumnType("date")
                        .HasColumnName("period_start");

                    b.Property<long>("TotalAlphas")
                        .HasColumnType("bigint")
                        .HasColumnName("total_alphas");

                    b.Property<long>("TotalCharlies")
                        .HasColumnType("bigint")
                        .HasColumnName("total_charlies");

                    b.Property<long>("TotalDeltas")
                        .HasColumnType("bigint")
                        .HasColumnName("total_deltas");

                    b.Property<int>("TrainingAnalysisId")
                        .HasColumnType("integer")
                        .HasColumnName("training_analysis_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("AnalysisId");

                    b.HasIndex("MatchAnalysisId");

                    b.HasIndex("TrainingAnalysisId");

                    b.HasIndex("UserId");

                    b.HasIndex("PeriodStart", "PeriodEnd");

                    b.ToTable("analysis", "public");
                });

            modelBuilder.Entity("TactiX.Models.Comparison", b =>
                {
                    b.Property<int>("ComparisonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("comparison_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ComparisonId"));

                    b.Property<string>("Advice")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("advice");

                    b.Property<decimal>("AlphaDiff")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("alpha_diff");

                    b.Property<int>("BaseMatchId")
                        .HasColumnType("integer")
                        .HasColumnName("base_match_id");

                    b.Property<decimal>("CharlieDiff")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("charlie_diff");

                    b.Property<int>("ComparedMatchId")
                        .HasColumnType("integer")
                        .HasColumnName("compared_match_id");

                    b.Property<string>("ComparisonResult")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("comparison_result");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("DeltaDiff")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("delta_diff");

                    b.Property<decimal>("HitFactorDiff")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("hit_factor_diff");

                    b.Property<int?>("MatchId")
                        .HasColumnType("integer");

                    b.Property<int?>("MatchId1")
                        .HasColumnType("integer");

                    b.Property<decimal>("MissDiff")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("miss_diff");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ComparisonId");

                    b.HasIndex("BaseMatchId");

                    b.HasIndex("ComparedMatchId");

                    b.HasIndex("ComparisonResult");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId1");

                    b.HasIndex("UserId");

                    b.ToTable("comparison", "public", t =>
                        {
                            t.HasCheckConstraint("CK_Comparison_Result", "comparison_result IN ('better', 'worse', 'similar')");
                        });
                });

            modelBuilder.Entity("TactiX.Models.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("match_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MatchId"));

                    b.Property<int?>("MatchAnalysisId")
                        .HasColumnType("integer")
                        .HasColumnName("match_analysis_id");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("match_date");

                    b.Property<string>("MatchName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("match_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("MatchId");

                    b.HasIndex("UserId");

                    b.ToTable("match", "public");
                });

            modelBuilder.Entity("TactiX.Models.MatchAnalysis", b =>
                {
                    b.Property<int>("MatchAnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("match_analysis_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MatchAnalysisId"));

                    b.Property<decimal>("AlphaPercentage")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("alpha_percentage");

                    b.Property<decimal>("AvgHitFactor")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("avg_hit_factor");

                    b.Property<DateTime>("CalculatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("calculated_at");

                    b.Property<decimal>("CharliePercentage")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("charlie_percentage");

                    b.Property<decimal>("DeltaPercentage")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("delta_percentage");

                    b.Property<bool>("IsBestPerformance")
                        .HasColumnType("boolean")
                        .HasColumnName("is_best_performance");

                    b.Property<int>("MatchId")
                        .HasColumnType("integer")
                        .HasColumnName("match_id");

                    b.Property<decimal>("MissPercentage")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("miss_percentage");

                    b.Property<decimal>("PerformanceScore")
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("performance_score");

                    b.Property<int>("TotalAlphas")
                        .HasColumnType("integer")
                        .HasColumnName("total_alphas");

                    b.Property<int>("TotalCharlies")
                        .HasColumnType("integer")
                        .HasColumnName("total_charlies");

                    b.Property<int>("TotalDeltas")
                        .HasColumnType("integer")
                        .HasColumnName("total_deltas");

                    b.Property<int>("TotalMisses")
                        .HasColumnType("integer")
                        .HasColumnName("total_misses");

                    b.Property<int>("TotalShots")
                        .HasColumnType("integer")
                        .HasColumnName("total_shots");

                    b.HasKey("MatchAnalysisId");

                    b.HasIndex("CalculatedAt");

                    b.HasIndex("IsBestPerformance");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.HasIndex("PerformanceScore");

                    b.ToTable("match_analysis", "public");
                });

            modelBuilder.Entity("TactiX.Models.MatchStage", b =>
                {
                    b.Property<int>("MatchStageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("match_stage_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MatchStageId"));

                    b.Property<long>("AlphasCount")
                        .HasColumnType("bigint")
                        .HasColumnName("alphas_count");

                    b.Property<long>("CharliesCount")
                        .HasColumnType("bigint")
                        .HasColumnName("charlies_count");

                    b.Property<long>("DeltasCount")
                        .HasColumnType("bigint")
                        .HasColumnName("deltas_count");

                    b.Property<double>("HitFactor")
                        .HasColumnType("double precision")
                        .HasColumnName("hit_factor");

                    b.Property<int>("MatchId")
                        .HasColumnType("integer")
                        .HasColumnName("match_id");

                    b.Property<long>("MissesCount")
                        .HasColumnType("bigint")
                        .HasColumnName("misses_count");

                    b.Property<long>("NumOfPlates")
                        .HasColumnType("bigint")
                        .HasColumnName("num_of_plates");

                    b.Property<long>("NumOfPoppers")
                        .HasColumnType("bigint")
                        .HasColumnName("num_of_poppers");

                    b.Property<long>("NumOfSpots")
                        .HasColumnType("bigint")
                        .HasColumnName("num_of_spots");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("stage_name");

                    b.Property<TimeSpan>("StageTime")
                        .HasColumnType("interval")
                        .HasColumnName("stage_time");

                    b.Property<long>("StageType")
                        .HasColumnType("bigint")
                        .HasColumnName("stage_type");

                    b.HasKey("MatchStageId");

                    b.HasIndex("MatchId");

                    b.HasIndex("StageName", "HitFactor");

                    b.ToTable("match_stage", "public");
                });

            modelBuilder.Entity("TactiX.Models.Training", b =>
                {
                    b.Property<int>("TrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("training_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrainingId"));

                    b.Property<DateTime>("TrainingDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("training_date");

                    b.Property<string>("TypeOfTraining")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type_of_training");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("TrainingId");

                    b.HasIndex("UserId");

                    b.ToTable("training", "public");
                });

            modelBuilder.Entity("TactiX.Models.TrainingAnalysis", b =>
                {
                    b.Property<int>("TrainingAnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("training_analysis_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrainingAnalysisId"));

                    b.Property<double>("AvgAlphas")
                        .HasColumnType("double precision")
                        .HasColumnName("avg_alphas");

                    b.Property<double>("AvgCharlies")
                        .HasColumnType("double precision")
                        .HasColumnName("avg_charlies");

                    b.Property<double>("AvgDeltas")
                        .HasColumnType("double precision")
                        .HasColumnName("avg_deltas");

                    b.Property<double>("AvgHitFactor")
                        .HasColumnType("double precision")
                        .HasColumnName("avg_hit_factor");

                    b.Property<double>("AvgMisses")
                        .HasColumnType("double precision")
                        .HasColumnName("avg_misses");

                    b.Property<string>("ComparisonAdvice")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("comparison_advice");

                    b.Property<string>("TrainingType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("training_type");

                    b.HasKey("TrainingAnalysisId");

                    b.HasIndex("TrainingType");

                    b.ToTable("training_analysis", "public");
                });

            modelBuilder.Entity("TactiX.Models.TrainingStage", b =>
                {
                    b.Property<int>("TrainingStageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("training_stage_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrainingStageId"));

                    b.Property<long>("AlphasCount")
                        .HasColumnType("bigint")
                        .HasColumnName("alphas_count");

                    b.Property<long>("CharliesCount")
                        .HasColumnType("bigint")
                        .HasColumnName("charlies_count");

                    b.Property<long>("DeltasCount")
                        .HasColumnType("bigint")
                        .HasColumnName("deltas_count");

                    b.Property<double>("HitFactor")
                        .HasColumnType("double precision")
                        .HasColumnName("hit_factor");

                    b.Property<long>("MissesCount")
                        .HasColumnType("bigint")
                        .HasColumnName("misses_count");

                    b.Property<long>("NumOfPlates")
                        .HasColumnType("bigint")
                        .HasColumnName("num_of_plates");

                    b.Property<long>("NumOfPoppers")
                        .HasColumnType("bigint")
                        .HasColumnName("num_of_poppers");

                    b.Property<long>("NumOfSpots")
                        .HasColumnType("bigint")
                        .HasColumnName("num_of_spots");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("stage_name");

                    b.Property<TimeSpan>("StageTime")
                        .HasColumnType("interval")
                        .HasColumnName("stage_time");

                    b.Property<string>("StageType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("stage_type");

                    b.Property<int>("TrainingId")
                        .HasColumnType("integer")
                        .HasColumnName("training_id");

                    b.HasKey("TrainingStageId");

                    b.HasIndex("TrainingId");

                    b.HasIndex("StageName", "HitFactor");

                    b.ToTable("training_stage", "public");
                });

            modelBuilder.Entity("TactiX.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hash_password");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("PracticeLevel")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("practice_level");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("surname");

                    b.HasKey("UserId");

                    b.HasIndex("Name", "Surname")
                        .IsUnique();

                    b.ToTable("user", "public");
                });

            modelBuilder.Entity("TactiX.Models.Analysis", b =>
                {
                    b.HasOne("TactiX.Models.MatchAnalysis", "MatchAnalysis")
                        .WithMany()
                        .HasForeignKey("MatchAnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TactiX.Models.TrainingAnalysis", "TrainingAnalysis")
                        .WithMany()
                        .HasForeignKey("TrainingAnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TactiX.Models.User", null)
                        .WithMany("Analyses")
                        .HasForeignKey("UserId");

                    b.Navigation("MatchAnalysis");

                    b.Navigation("TrainingAnalysis");
                });

            modelBuilder.Entity("TactiX.Models.Comparison", b =>
                {
                    b.HasOne("TactiX.Models.MatchAnalysis", "BaseMatchAnalysis")
                        .WithMany("ComparisonsAsBase")
                        .HasForeignKey("BaseMatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TactiX.Models.MatchAnalysis", "ComparedMatchAnalysis")
                        .WithMany("ComparisonsAsTarget")
                        .HasForeignKey("ComparedMatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TactiX.Models.Match", null)
                        .WithMany("ComparisonsWhereBase")
                        .HasForeignKey("MatchId");

                    b.HasOne("TactiX.Models.Match", null)
                        .WithMany("ComparisonsWhereTarget")
                        .HasForeignKey("MatchId1");

                    b.HasOne("TactiX.Models.User", null)
                        .WithMany("Comparisons")
                        .HasForeignKey("UserId");

                    b.Navigation("BaseMatchAnalysis");

                    b.Navigation("ComparedMatchAnalysis");
                });

            modelBuilder.Entity("TactiX.Models.Match", b =>
                {
                    b.HasOne("TactiX.Models.User", "User")
                        .WithMany("Matches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TactiX.Models.MatchAnalysis", b =>
                {
                    b.HasOne("TactiX.Models.Match", "Match")
                        .WithOne("Analysis")
                        .HasForeignKey("TactiX.Models.MatchAnalysis", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("TactiX.Models.MatchStage", b =>
                {
                    b.HasOne("TactiX.Models.Match", "Match")
                        .WithMany("Stages")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("TactiX.Models.Training", b =>
                {
                    b.HasOne("TactiX.Models.User", "User")
                        .WithMany("Trainings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TactiX.Models.TrainingStage", b =>
                {
                    b.HasOne("TactiX.Models.Training", "Training")
                        .WithMany("Stages")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Training");
                });

            modelBuilder.Entity("TactiX.Models.Match", b =>
                {
                    b.Navigation("Analysis")
                        .IsRequired();

                    b.Navigation("ComparisonsWhereBase");

                    b.Navigation("ComparisonsWhereTarget");

                    b.Navigation("Stages");
                });

            modelBuilder.Entity("TactiX.Models.MatchAnalysis", b =>
                {
                    b.Navigation("ComparisonsAsBase");

                    b.Navigation("ComparisonsAsTarget");
                });

            modelBuilder.Entity("TactiX.Models.Training", b =>
                {
                    b.Navigation("Stages");
                });

            modelBuilder.Entity("TactiX.Models.User", b =>
                {
                    b.Navigation("Analyses");

                    b.Navigation("Comparisons");

                    b.Navigation("Matches");

                    b.Navigation("Trainings");
                });
#pragma warning restore 612, 618
        }
    }
}
